/**
 * Copyright (c) 2020, Cristina Ruiz Martin
 * ARSLab - Carleton University
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
/**
* Model developed by Hoda Khalil in Cell-DEVS CD++
* Implemented in Cadmium-cell-DEVS by Cristina Ruiz Martin
*/

#ifndef CADMIUM_CELLDEVS_CO2_CELL_HPP
#define CADMIUM_CELLDEVS_CO2_CELL_HPP

#include <cmath>
#include <nlohmann/json.hpp>
#include <cadmium/celldevs/cell/grid_cell.hpp>

using nlohmann::json;
using namespace cadmium::celldevs;

std::list<std::pair<char,std::tuple<int,int,int>>> nextCO2Position; //List include the next action for CO2_Source movement <action(+:Appear CO2_Source;-:Remove CO2_Source),<xPosition,yPosition>>

/************************************/
/******COMPLEX STATE STRUCTURE*******/
/************************************/
enum CELL_TYPE {AIR=-100, CO2_SOURCE=-200, IMPERMEABLE_STRUCTURE=-300, DOOR=-400, WINDOW=-500, VENTILATION=-600, WORKSTATION=-700, DUCT_WALL=-800, DUCT_CEILING=-900};
struct co2 {
    int counter;
    int concentration;
    CELL_TYPE type;
    co2() : counter(-1), concentration(500), type(AIR) {}  // a default constructor is required
    co2(int i_counter, int i_concentration, CELL_TYPE i_type) : counter(i_counter), concentration(i_concentration), type(i_type) {}
};
// Required for comparing states and detect any change
inline bool operator != (const co2 &x, const co2 &y) {
    return x.counter != y.counter || x.concentration != y.concentration || x.type != y.type;
}
// Required if you want to use transport delay (priority queue has to sort messages somehow)
inline bool operator < (const co2& lhs, const co2& rhs){ return true; }

// Required for printing the state of the cell
std::ostream &operator << (std::ostream &os, const co2 &x) {
    os << "<" << x.counter << "," << x.concentration << "," << x.type <<">";
    return os;
}

// Required for creating co2 objects from JSON file
void from_json(const json& j, co2 &s) {
    j.at("counter").get_to(s.counter);
    j.at("concentration").get_to(s.concentration);
    j.at("type").get_to(s.type);
}

/************************************/
/******COMPLEX CONFIG STRUCTURE******/
/************************************/
struct conc {
    float conc_increase; //CO2 generated by one person
    int base; //CO2 base level
    int window_conc; //CO2 level at window
    int vent_conc; //CO2 level at vent
    int resp_time;
    // Each cell is 25cm x 25cm x 25cm = 15.626 Liters of air each
    // CO2 sources have their concentration continually increased by default by 12.16 ppm every 5 seconds.
    conc(): conc_increase(121.6*2), base(500), resp_time(5), window_conc(400), vent_conc(300) {}
    conc(float ci, int b, int wc, int vc, int r): conc_increase(ci), base(b), resp_time(r), window_conc(wc), vent_conc(vc) {}
};
void from_json(const json& j, conc &c) {
    j.at("conc_increase").get_to(c.conc_increase);
    j.at("base").get_to(c.base);
    j.at("resp_time").get_to(c.resp_time);
    j.at("window_conc").get_to(c.window_conc);
    j.at("vent_conc").get_to(c.vent_conc);
}


template <typename T>
class co2_lab_cell : public grid_cell<T, co2> {
public:
    using grid_cell<T, co2, int>::simulation_clock;
    using grid_cell<T, co2, int>::state;
    using grid_cell<T, co2, int>::map;
    using grid_cell<T, co2, int>::neighbors;

    using config_type = conc;  // IMPORTANT FOR THE JSON
    float  concentration_increase; //// CO2 sources have their concentration continually increased
    int base; //CO2 base level
    int resp_time; //Time used to calculate the concentration inscrease
    int window_conc; //CO2 level at window
    int vent_conc; //CO2 level at cent


    co2_lab_cell() : grid_cell<T, co2, int>() {
    }

    co2_lab_cell(cell_position const &cell_id, cell_unordered<int> const &neighborhood, co2 initial_state,
                 cell_map<co2, int> const &map_in, std::string const &delayer_id, conc config) :
            grid_cell<T, co2>(cell_id, neighborhood, initial_state, map_in, delayer_id) {
        concentration_increase = config.conc_increase;
        base = config.base;
        resp_time = config.resp_time;
        window_conc = config.window_conc;
        vent_conc = config.vent_conc;

        if(initial_state.type == CO2_SOURCE) {
            std::pair<char, std::tuple<int, int, int>> intiAction;
            intiAction.first = '-';
            std::get<0>(intiAction.second) = cell_id[0];
            std::get<1>(intiAction.second) = cell_id[1];
            std::get<2>(intiAction.second) = cell_id[2];
            nextCO2Position.push_back(intiAction);
        }

    }

    co2 local_computation() const override {
        co2 new_state = state.current_state;

        std::tuple<int,int, int> currentLocation;
        std::get<0>(currentLocation) = this->map.location[0];
        std::get<1>(currentLocation) = this->map.location[1];
        std::get<2>(currentLocation) = this->map.location[2];

        switch(state.current_state.type){
            case IMPERMEABLE_STRUCTURE:
                new_state.concentration = 0;
                break;
            case DOOR:
                new_state.concentration = base;
                break;
            case WINDOW:
                new_state.concentration = window_conc;
                break;
            case VENTILATION:
                new_state.concentration = vent_conc;
                break;
            case DUCT_WALL:{
                int concentration = 0;
                int num_neighbors = 0;
                for(auto neighbors: state.neighbors_state) {
                    if( neighbors.second.concentration < 0){
                        assert(false && "co2 concentration cannot be negative");
                    }
                    if(neighbors.second.type != IMPERMEABLE_STRUCTURE){
                        concentration += neighbors.second.concentration;
                        num_neighbors +=1;
                    }
                }
                new_state.concentration = concentration/num_neighbors;

                if(nextCO2Position.front().first == '+') {
                    if (currentLocation == nextCO2Position.front().second) {
                        //Arrangement next action
                        std::pair<char, std::tuple<int, int, int>> newAction;
                        newAction.first = '-';
                        newAction.second = currentLocation;
                        nextCO2Position.push_back(newAction);

                        nextCO2Position.pop_front();
                        new_state.type = CO2_SOURCE;
                    }
                }

                break;
            }
            case DUCT_CEILING:{
                int concentration = 0;
                int num_neighbors = 0;
                for(auto neighbors: state.neighbors_state) {
                    if( neighbors.second.concentration < 0){
                        assert(false && "co2 concentration cannot be negative");
                    }
                    if(neighbors.second.type != IMPERMEABLE_STRUCTURE){
                        concentration += neighbors.second.concentration;
                        num_neighbors +=1;
                    }
                }
                new_state.concentration = concentration/num_neighbors;

                if(nextCO2Position.front().first == '+') {
                    if (currentLocation == nextCO2Position.front().second) {
                        //Arrangement next action
                        std::pair<char, std::tuple<int, int, int>> newAction;
                        newAction.first = '-';
                        newAction.second = currentLocation;
                        nextCO2Position.push_back(newAction);

                        nextCO2Position.pop_front();
                        new_state.type = CO2_SOURCE;
                    }
                }

                break;
            }
            case AIR:{
                int concentration = 0;
                int num_neighbors = 0;
                for(auto neighbors: state.neighbors_state) {
                    if( neighbors.second.concentration < 0){
                        assert(false && "co2 concentration cannot be negative");
                    }
                    if(neighbors.second.type != IMPERMEABLE_STRUCTURE){
                        concentration += neighbors.second.concentration;
                        num_neighbors +=1;
                    }
                }
                new_state.concentration = concentration/num_neighbors;

                if(nextCO2Position.front().first == '+') {
                    if (currentLocation == nextCO2Position.front().second) {
                        //Arrangement next action
                        std::pair<char, std::tuple<int, int, int>> newAction;
                        newAction.first = '-';
                        newAction.second = currentLocation;
                        nextCO2Position.push_back(newAction);

                        nextCO2Position.pop_front();
                        new_state.type = CO2_SOURCE;
                    }
                }

                break;
            }
            case WORKSTATION:{
                int concentration = 0;
                int num_neighbors = 0;
                for(auto neighbors: state.neighbors_state) {
                    if( neighbors.second.concentration < 0){
                        assert(false && "co2 concentration cannot be negative");
                    }
                    if(neighbors.second.type != IMPERMEABLE_STRUCTURE){
                        concentration += neighbors.second.concentration;
                        num_neighbors +=1;
                    }
                }
                new_state.concentration = concentration/num_neighbors;

                break;
            }
            case CO2_SOURCE:{
                int concentration = 0;
                int num_neighbors = 0;

                for(auto neighbors: state.neighbors_state) {
                    if( neighbors.second.concentration < 0){
                        assert(false && "co2 concentration cannot be negative");
                    }
                    if(neighbors.second.type != IMPERMEABLE_STRUCTURE){
                        concentration += neighbors.second.concentration;
                        num_neighbors +=1;
                    }
                }

                new_state.concentration = (concentration/num_neighbors) + (concentration_increase);
                new_state.counter += 1;

                if (nextCO2Position.front().first == '-' && currentLocation == nextCO2Position.front().second) {
                    std::pair<char, std::tuple<int, int, int>> newAction;
                    std::tuple<int, int, int> nextLocation = setNextRoute(currentLocation);

                    newAction.first = '+';
                    newAction.second = nextLocation;
                    nextCO2Position.push_back(newAction);

                    nextCO2Position.pop_front();
                    new_state.type = AIR;
                }

                break;
            }
            default:{
                assert(false && "should never happen");
            }
        }

        return new_state;

    }

    //set route to move using random number for random movement
    [[nodiscard]] std::tuple<int,int,int> setNextRoute(std::tuple<int,int, int> location) const {
        std::tuple<int, int, int> nextLocation;
        std::tuple<int, int, int> locationChange;

        int random_number = rand()% 100;

        if (random_number >= 0 && random_number <= 20 ) { //move left
            locationChange = navigation(location,'x','-');
        }
        else if (random_number >= 30 && random_number<= 40){//move right
            locationChange = navigation(location,'x','+');
        }

        else if (random_number >= 50 && random_number <= 80) { //move up
            locationChange = navigation(location,'y','-');
        }
        else{//move down
            locationChange = navigation(location,'y','+');
        }

        std::get<0>(nextLocation) = std::get<0>(location) + std::get<0>(locationChange);
        std::get<1>(nextLocation) = std::get<1>(location) + std::get<1>(locationChange);
        std::get<2>(nextLocation) = std::get<2>(location) + std::get<2>(locationChange);

        return nextLocation;
    }

    //navigate the path choosing the priority and the direction
    [[nodiscard]] std::tuple<int,int,int> navigation(std::tuple<int,int,int> location, char priority, char direction) const {
        std::tuple<int,int,int> locationChange;
        locationChange = std::make_tuple(0,0,0);

        int change;
        if(direction == '-'){
            change = -1;
        } else{
            change = 1;
        }

        if(priority == 'x'){
            if(moveCheck(std::get<0>(location) + change, std::get<1>(location))){
                std::get<0>(locationChange) = change;
            }else if(moveCheck(std::get<0>(location), std::get<1>(location) + change)){
                std::get<1>(locationChange) = change;
            }else if(moveCheck(std::get<0>(location), std::get<1>(location) - change)){
                std::get<1>(locationChange) = 0 - change;
            }else if(moveCheck(std::get<0>(location) - change, std::get<1>(location))){
                std::get<0>(locationChange) = change;
            }
        }else{
            if(moveCheck(std::get<0>(location), std::get<1>(location) + change)){
                std::get<1>(locationChange) = change;
            }else if(moveCheck(std::get<0>(location) + change, std::get<1>(location))){
                std::get<0>(locationChange) = change;
            }else if(moveCheck(std::get<0>(location) - change, std::get<1>(location))){
                std::get<0>(locationChange) = 0 - change;
            }else if(moveCheck(std::get<0>(location), std::get<1>(location) - change)){
                std::get<1>(locationChange) = change;
            }
        }
        return locationChange;
    }

    //check the next location safe to move if cell_type is AIR
    [[nodiscard]] bool moveCheck(int xNext,int yNext) const {
        bool moveCheck = false;
        for(auto const neighbors: state.neighbors_state) {
            if(neighbors.first[0] == xNext){
                if(neighbors.first[1] == yNext){
                    if(neighbors.second.type == AIR) {
                        if(checkPreviousLocation(xNext,yNext)) {
                            moveCheck = true;
                        }
                    }
                }
            }
        }
        return moveCheck;
    }

    //check the collision between the CO2_sources
    [[nodiscard]] bool checkPreviousLocation(int xNextPos, int yNextPos) const {
        for (auto checklastlocation: nextCO2Position){
            if(std::get<0>(checklastlocation.second) == xNextPos && std::get<1>(checklastlocation.second) == yNextPos){
                return false;
            }
        }
        return true;
    }

    // It returns the delay to communicate cell's new state.
    T output_delay(co2 const &cell_state) const override {
        switch(cell_state.type){
            case CO2_SOURCE: return resp_time;
            default: return 1;
        }
    }

};

#endif //CADMIUM_CELLDEVS_CO2_CELL_HPP












